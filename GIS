
//================GOVERNMENT INFORMATION SYSTEM=================//
import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import java.io.*;

public class InformationSystem extends JFrame {

    JFrame main = new JFrame();
    JFrame sub = new JFrame();

    private JTextField usernameField;
    private JPasswordField passwordField;
    private JButton loginButton;
    private JButton signupButton;

    public InformationSystem() {
        super("Information System");
        // UIManager.put("JFrame.activeTitleBackground", Color.RED);

        JLabel usernameLabel = new JLabel("Username: ");
        JLabel passwordLabel = new JLabel("Password: ");

        usernameField = new JTextField(20);
        passwordField = new JPasswordField(20);

        loginButton = new JButton("Log In");
        Color buttonColor1 = new Color(0, 137, 205);
        Color buttonColor3 = new Color(154, 255, 242);
        loginButton.setBackground(buttonColor1);
        main.setForeground(buttonColor3);
        main.add(loginButton);

        signupButton = new JButton("Sign Up");
        Color buttonColor2 = new Color(0, 137, 205);
        Color buttonColor4 = new Color(154, 255, 242);
        signupButton.setBackground(buttonColor2);
        main.setForeground(buttonColor4);
        main.add(signupButton);

        loginButton.addActionListener(new LoginListener());
        signupButton.addActionListener(new SignupListener());
        // usernameLabel.setFont(new Font("Imprint MT Shadow", Font.BOLD, 14));
        // passwordLabel.setFont(new Font("Imprint MT Shadow", Font.BOLD, 14));

        JPanel inputPanel = new JPanel();
        inputPanel.setBackground(new Color(154, 255, 242));
        inputPanel.add(usernameLabel);
        inputPanel.add(usernameField);
        inputPanel.add(passwordLabel);
        inputPanel.add(passwordField);

        JPanel buttonPanel = new JPanel();
        buttonPanel.add(loginButton);
        buttonPanel.add(signupButton);
        buttonPanel.setBackground(new Color(154, 255, 242));

        add(inputPanel, BorderLayout.CENTER);
        add(buttonPanel, BorderLayout.SOUTH);

        setSize(300, 200);
        setLocationRelativeTo(null);
        setVisible(true);

    }

    private class LoginListener implements ActionListener {
        public void actionPerformed(ActionEvent e) {
            String username = usernameField.getText();
            String password = new String(passwordField.getPassword());

            try {
                BufferedReader reader = new BufferedReader(new FileReader("user.txt"));
                String line;
                while ((line = reader.readLine()) != null) {
                    String[] parts = line.split(": ");
                    if (parts[0].equals(username) && parts[1].equals(password)) {
                        JOptionPane.showMessageDialog(null, "Log in successful!");
                        CRUDOperations operations = new CRUDOperations();
                        operations.setVisible(true);
                        // code to open CRUD operations frame
                        return;
                    }
                }
                reader.close();
                JOptionPane.showMessageDialog(null, "Invalid username or password.");
            } catch (IOException ex) {
                ex.printStackTrace();
            }
        }
    }

    private class SignupListener implements ActionListener {
        public void actionPerformed(ActionEvent e) {
            String username = usernameField.getText();
            String password = new String(passwordField.getPassword());

            try {
                if (username.isEmpty() || password.isEmpty()) {
                    JOptionPane.showMessageDialog(null, "Please fill out all fields");
                } else {
                    BufferedWriter writer = new BufferedWriter(new FileWriter("user.txt", true));
                    writer.write(username + ": " + password);
                    writer.newLine();
                    writer.close();
                    JOptionPane.showMessageDialog(null, "Sign up successful!");
                }
            } catch (IOException ex) {
                ex.printStackTrace();
            }
        }
    }

    public class CRUDOperations extends JFrame {

        public CRUDOperations() {
            super("Government Information System");

            JButton createButton = new JButton("Create");
            JButton searchButton = new JButton("Search");
            JButton updateButton = new JButton("Update");
            JButton deleteButton = new JButton("Delete");
            JButton logoutButton = new JButton("Log out");

            createButton.addActionListener(new CreateListener());
            searchButton.addActionListener(new SearchListener());
            updateButton.addActionListener(new UpdateListener());
            deleteButton.addActionListener(new DeleteListener());
            logoutButton.addActionListener(new LogoutListener());

            Color buttonColor1 = new Color(0, 137, 205);
            Color buttonColor3 = new Color(154, 255, 242);

            createButton.setBackground(buttonColor1);
            searchButton.setBackground(buttonColor1);
            updateButton.setBackground(buttonColor1);
            deleteButton.setBackground(buttonColor1);
            logoutButton.setBackground(buttonColor1);

            main.setForeground(buttonColor3);

            main.add(createButton);
            main.add(searchButton);
            main.add(updateButton);
            main.add(deleteButton);
            main.add(logoutButton);

            JPanel buttonPanel = new JPanel(new FlowLayout(FlowLayout.CENTER));

            buttonPanel.setLayout(new GridBagLayout());
            GridBagConstraints gbc = new GridBagConstraints();
            gbc.insets = new Insets(10, 10, 10, 10);
            buttonPanel.setBackground(new Color(154, 255, 242));

            buttonPanel.add(createButton);
            buttonPanel.add(searchButton);
            buttonPanel.add(updateButton);
            buttonPanel.add(deleteButton);
            buttonPanel.add(logoutButton);

            add(buttonPanel, BorderLayout.CENTER);
            setSize(400, 150);
            setLocationRelativeTo(null);
            setVisible(true);

        }

        private class CreateListener implements ActionListener {
            @Override
            public void actionPerformed(ActionEvent e) {
                create();
            }
        }

        private class SearchListener implements ActionListener {
            @Override
            public void actionPerformed(ActionEvent ex) {
                search();
            }
        }

        private class UpdateListener implements ActionListener {
            @Override
            public void actionPerformed(ActionEvent a) {
                updateEmployee();
            }
        }

        private class DeleteListener implements ActionListener {
            @Override
            public void actionPerformed(ActionEvent ax) {
                delete();
            }
        }

        private class LogoutListener implements ActionListener {
            public void actionPerformed(ActionEvent e) {

                int confirm = JOptionPane.showConfirmDialog(null, "Are you sure you want to log out?", "Confirm",
                        JOptionPane.YES_NO_OPTION);
                if (confirm == JOptionPane.YES_OPTION) {
                    dispose();
                    System.exit(0);
                }
            }
        }

        public void create() {
            // Enter new data and save to a text file
            UIManager.put("OptionPane.messageForeground", new Color(0, 137, 205));
            UIManager.put("OptionPane.messageBackground", new Color(154, 255, 242));
            String id = JOptionPane.showInputDialog(this, "Enter the employee ID:", "Employee ID",
                    JOptionPane.QUESTION_MESSAGE);
            String name = JOptionPane.showInputDialog(this, "Enter the employee name:", "Employee Name",
                    JOptionPane.QUESTION_MESSAGE);
            String salary = JOptionPane.showInputDialog(this, "Enter the employee salary:", "Employee Salary",
                    JOptionPane.QUESTION_MESSAGE);
            String dept = JOptionPane.showInputDialog(this, "What department:", "Department",
                    JOptionPane.QUESTION_MESSAGE);

            if (id == null || id.isEmpty() || name == null || name.isEmpty() || salary == null
                    || salary.isEmpty() || dept.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Please fill out all the fields.", "Error",
                        JOptionPane.ERROR_MESSAGE);
                return;
            }
            try {
                BufferedWriter writer = new BufferedWriter(new FileWriter("zibit.txt", true));
                writer.write(id + ": " + name + ": " + salary + ": " + dept);
                writer.newLine();
                writer.close();
                JOptionPane.showMessageDialog(this, "New data has been added successfully.", "Success",
                        JOptionPane.INFORMATION_MESSAGE);
            } catch (IOException e) {
                JOptionPane.showMessageDialog(this, "Error while creating the employee data: " + e.getMessage(),
                        "Error", JOptionPane.ERROR_MESSAGE);
            }
        }

        public void search() {
            // Search for data from the text file
            UIManager.put("OptionPane.messageForeground", new Color(0, 137, 205));
            UIManager.put("OptionPane.messageBackground", new Color(154, 255, 242));
            String result = "";
            String id = JOptionPane.showInputDialog(this, "Enter the employee ID number.");

            // check if the input field is empty
            if (id == null || id.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Please fill out the field.");
                return;
            }

            try {
                // Read the data from the text file
                BufferedReader br = new BufferedReader(new FileReader("zibit.txt"));
                // BufferedReader br = new BufferedReader(new FileReader("zi.txt"));
                String line;
                while ((line = br.readLine()) != null) {
                    String[] parts = line.split(": ");
                    if (parts[0].equals(id)) {
                        result = "ID: " + parts[0] + "\n" + "Name: " + parts[1] + "\n" + "Salary: " + parts[2] + "\n"
                                + "Department: " + parts[3] + "\n";
                        break;
                    }
                }

                br.close();
                if (result.isEmpty()) {
                    JOptionPane.showMessageDialog(this, "Data not found.");
                } else {
                    JOptionPane.showMessageDialog(this, result);
                }
            } catch (FileNotFoundException e) {
                JOptionPane.showMessageDialog(this, "File not found: " + e.getMessage());
            } catch (IOException e) {
                JOptionPane.showMessageDialog(this, "Error reading file: " + e.getMessage());
            }
        }

        public void updateEmployee() {
            UIManager.put("OptionPane.messageForeground", new Color(0, 137, 205));
            UIManager.put("OptionPane.messageBackground", new Color(154, 255, 242));
            String id = JOptionPane.showInputDialog(this, "Enter the employee ID number.");

            if (id == null || id.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Please fill out the field.");
                return;
            }

            try {
                // Read the data from the text file
                BufferedReader br = new BufferedReader(new FileReader("zibit.txt"));
                String line;
                StringBuilder sb = new StringBuilder();
                boolean found = false;
                while ((line = br.readLine()) != null) {
                    String[] parts = line.split(": ");
                    if (!parts[0].equals(id)) {
                        sb.append(line).append("\n");
                    } else {
                        found = true;
                        String name = JOptionPane.showInputDialog(this, "Enter the new name:", parts[1]);
                        String salary = JOptionPane.showInputDialog(this, "Enter the new salary:", parts[2]);
                        String dept = JOptionPane.showInputDialog(this, "Enter the new salary:", parts[3]);
                        // Append the new data to the string builder
                        parts[0] = id;
                        parts[1] = name;
                        parts[2] = salary;
                        parts[3] = dept;
                        line = parts[0] + ": " + parts[1] + ": " + parts[2] + ": " + parts[3];
                        sb.append(line).append("\n");
                    }
                }
                br.close();
                if (!found) {
                    JOptionPane.showMessageDialog(this, "Error: Data with ID " + id + " does not exist!");
                } else if (id.isEmpty()) {
                    JOptionPane.showMessageDialog(this, "Please fill out th field.");
                } else {
                    // Write the updated data back to the text file
                    PrintWriter out = new PrintWriter(new FileWriter("zibit.txt"));
                    out.println(sb.toString());
                    out.close();
                    JOptionPane.showMessageDialog(this, "Data updated successfully!");
                }
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this, "Error: IO Exception!");
            }
        }

        public void delete() {
            // Delete data from the text file.
            UIManager.put("OptionPane.messageForeground", new Color(0, 137, 205));
            UIManager.put("OptionPane.messageBackground", new Color(154, 255, 242));
            String id = JOptionPane.showInputDialog(this, "Enter employee ID number.");
            try {
                // Read the data from the text zi
                BufferedReader br = new BufferedReader(new FileReader("zibit.txt"));
                // BufferedReader br = new BufferedReader(new FileReader("zi.txt"));
                String line;
                boolean found = false;
                StringBuilder sb = new StringBuilder();
                while ((line = br.readLine()) != null) {
                    String[] parts = line.split(": ");
                    if (!parts[0].equals(id)) {
                        sb.append(line).append("\n");
                    } else {
                        found = true;
                    }
                }
                br.close();

                // Write the updated data back to the text file
                if (!found) {
                    JOptionPane.showMessageDialog(this, "Error: Data with ID " + id + " does not exist!");
                } else if (id.isEmpty()) {
                    JOptionPane.showMessageDialog(this, "Please fill out the field.");
                } else {
                    // Write the updated data back to the text file
                    PrintWriter out = new PrintWriter(new FileWriter("zibit.txt"));
                    // PrintWriter out = new PrintWriter(new FileWriter("zi.txt"));
                    out.println(sb.toString());
                    out.close();

                    JOptionPane.showMessageDialog(this, "Data deleted successfully!");
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }

    public static void main(String[] args) {
        InformationSystem system = new InformationSystem();
        system.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        system.setVisible(true);
    }
}
